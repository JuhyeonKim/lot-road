<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">
	<context:annotation-config />
	<context:component-scan base-package="com.nagesoft.postcode" scoped-proxy="targetClass" use-default-filters="false">
<!-- 		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect" /> -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- AOP 설정 -->
	<bean id="pageableBeforeAdvice" class="com.nagesoft.module.core.mybatis.NGPageableBeforeAdvice" />
	<bean id="pageableAfterAdvice" class="com.nagesoft.module.core.mybatis.NGPageableAfterAdvice" />

	<aop:config expose-proxy="false">
		<aop:aspect ref="pageableBeforeAdvice">
			<aop:pointcut id="pageableBeforePointcut" expression="execution(public * com.nagesoft.postcode..dao.*.*(..))" />
			<aop:before method="processBefore" pointcut-ref="pageableBeforePointcut" />
		</aop:aspect>
		<aop:aspect ref="pageableAfterAdvice">
			<aop:pointcut id="pageableAfterPointcut" expression="execution(public * com.nagesoft.postcode..dao.*.*(..))" />
			<aop:after-returning method="processAfter" pointcut-ref="pageableBeforePointcut" returning="returnValue" />
		</aop:aspect>
	</aop:config>

	<!-- DB -->
</beans>